"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("programs"),ApplicationConfiguration.registerModule("submissions"),ApplicationConfiguration.registerModule("subscribers"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"}).state("tree",{url:"/tree",templateUrl:"modules/core/views/tree.client.view.html"}).state("planets",{url:"/planets",templateUrl:"modules/core/views/planets.client.view.html"})}]),angular.module("core").controller("FullScreenController",["$scope",function($scope){$scope.allowFullScreen=function(shouldAllow){$scope.shouldAllowFullScreen=shouldAllow,this.$on("$destroy",function(){$scope.shouldAllowFullScreen=!shouldAllow})}}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,$scope.open=function(){$scope.title="Open",$scope.subtitle="Our curriculum is free and open source. We use agile development on all projects."},$scope.isomer=function(){$scope.title="Isomer",$scope.subtitle="The Open Source, blended classroom, non-profit, project-focused, community driven developer bootcamp."},$scope.fullStack=function(){$scope.title="Full-Stack",$scope.subtitle="Understanding the entire stack is an essential engineering skill. From Databases to client, we've got you covered."},$scope.nonProfit=function(){$scope.title="Non-Profit",$scope.subtitle="Our aim is to provide the best education as accessibly as possible. Know that your tuition is only being allocated for as efficient of teaching as possible."},$scope.isomer()}]),angular.module("core").directive("tree",function(){return{restrict:"A",link:function(scope,element){var ctx=element[0].getContext("2d");element[0].height,ctx.fillRect(50,25,150,100)}}}),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("programs").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Programs","programs","dropdown","/course(/create)?"),Menus.addSubMenuItem("topbar","programs","List Programs","programs"),Menus.addSubMenuItem("topbar","programs","New Program","course/create")}]),angular.module("programs").config(["$stateProvider",function($stateProvider){$stateProvider.state("viewCourse",{url:"/program",templateUrl:"modules/course/views/course.client.view.html"}).state("viewDeets",{url:"/deets",templateUrl:"modules/course/views/deets.client.view.html"})}]),angular.module("programs").controller("ProgramsController",["$scope","$stateParams","$location","Authentication","Programs",function($scope,$stateParams,$location,Authentication){$scope.authentication=Authentication,$scope.setFull}]),angular.module("submissions").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Submissions","submissions","dropdown","/submissions(/create)?"),Menus.addSubMenuItem("topbar","submissions","List Submissions","submissions"),Menus.addSubMenuItem("topbar","submissions","New Submission","submissions/create")}]),angular.module("submissions").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSubmissions",{url:"/submissions",templateUrl:"modules/submissions/views/list-submissions.client.view.html"}).state("createSubmission",{url:"/submissions/create",templateUrl:"modules/submissions/views/create-submission.client.view.html"}).state("viewSubmission",{url:"/submissions/:submissionId",templateUrl:"modules/submissions/views/view-submission.client.view.html"}).state("editSubmission",{url:"/submissions/:submissionId/edit",templateUrl:"modules/submissions/views/edit-submission.client.view.html"})}]),angular.module("submissions").controller("SubmissionsController",["$scope","$stateParams","$location","Authentication","Submissions",function($scope,$stateParams,$location,Authentication,Submissions){$scope.authentication=Authentication,$scope.create=function(){var submission=new Submissions({name:this.name});submission.$save(function(response){$location.path("submissions/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message}),this.name=""},$scope.remove=function(submission){if(submission){submission.$remove();for(var i in $scope.submissions)$scope.submissions[i]===submission&&$scope.submissions.splice(i,1)}else $scope.submission.$remove(function(){$location.path("submissions")})},$scope.update=function(){var submission=$scope.submission;submission.$update(function(){$location.path("submissions/"+submission._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.submissions=Submissions.query()},$scope.findOne=function(){$scope.submission=Submissions.get({submissionId:$stateParams.submissionId})}}]),angular.module("submissions").factory("Submissions",["$resource",function($resource){return $resource("submissions/:submissionId",{submissionId:"@_id"},{update:{method:"PUT"}})}]),angular.module("subscribers").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Subscribers","subscribers","dropdown","/subscribers(/create)?"),Menus.addSubMenuItem("topbar","subscribers","List Subscribers","subscribers"),Menus.addSubMenuItem("topbar","subscribers","New Subscriber","subscribers/create")}]),angular.module("subscribers").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSubscribers",{url:"/subscribers",templateUrl:"modules/subscribers/views/list-subscribers.client.view.html"}).state("createSubscriber",{url:"/subscribers/create",templateUrl:"modules/subscribers/views/create-subscriber.client.view.html"}).state("viewSubscriber",{url:"/subscribers/:subscriberId",templateUrl:"modules/subscribers/views/view-subscriber.client.view.html"}).state("editSubscriber",{url:"/subscribers/:subscriberId/edit",templateUrl:"modules/subscribers/views/edit-subscriber.client.view.html"})}]),angular.module("subscribers").controller("SubscribersController",["$scope","$stateParams","$location","Authentication","Subscribers",function($scope,$stateParams,$location,Authentication,Subscribers){$scope.authentication=Authentication,$scope.create=function(){var subscriber=new Subscribers({name:this.name});subscriber.$save(function(response){$location.path("subscribers/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message}),this.name=""},$scope.remove=function(subscriber){if(subscriber){subscriber.$remove();for(var i in $scope.subscribers)$scope.subscribers[i]===subscriber&&$scope.subscribers.splice(i,1)}else $scope.subscriber.$remove(function(){$location.path("subscribers")})},$scope.update=function(){var subscriber=$scope.subscriber;subscriber.$update(function(){$location.path("subscribers/"+subscriber._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.subscribers=Subscribers.query()},$scope.findOne=function(){$scope.subscriber=Subscribers.get({subscriberId:$stateParams.subscriberId})}}]),angular.module("subscribers").factory("Subscribers",["$resource",function($resource){return $resource("subscribers/:subscriberId",{subscriberId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);